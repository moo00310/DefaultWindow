#include "pch.h"
#include "CPlayer_SSH_Ice.h"

#include "CKeyMgr.h"
#include "CScrollMgr.h"

CPlayer_SSH_Ice::CPlayer_SSH_Ice()
{
}

CPlayer_SSH_Ice::~CPlayer_SSH_Ice()
{
}

void CPlayer_SSH_Ice::Initialize()
{
    m_tInfo.vPos = { 75.f, 300.f, 0.f };

    D3DXMatrixIdentity(&m_tInfo.matWorld);

    m_vPoint = { 0.f, 0.f, 0.f };
    m_vOriginPoint = m_vPoint;

    m_fSpeed = 1.f;

    m_eRender = RENDER_GAMEOBJECT;
}

int CPlayer_SSH_Ice::Update()
{   
    D3DXMATRIX matScale, matRotZ, matTranse, matRevZ, matParrent;

    // ??????⑤슢堉???????Β?竊???꿔꺂?????????潁??
    // D3DXMatrixScaling(?嚥▲굧?????戮곗?雅?퍔瑗ⓩ뤃??????嚥싳쇎紐??????Β?竊?????녿뮝??? X?熬곣뫖利??? Y?熬곣뫖利??? Z?熬곣뫖利???

    // ???????⑤슢堉???????Β?竊???꿔꺂?????????潁??
    // D3DXMatrixRotationZ(?嚥▲굧?????戮곗?雅?퍔瑗ⓩ뤃??????嚥싳쇎紐??????Β?竊?????녿뮝??? ???????醫딆┣????????ㅻ깽???)
    // 
    // ????썹땟????⑤슢堉???????Β?竊???꿔꺂?????????潁??
    // D3DXMatrixTranslation(?嚥▲굧?????戮곗?雅?퍔瑗ⓩ뤃??????嚥싳쇎紐??????Β?竊?????녿뮝??? x????썹땟?? y????썹땟?? z????썹땟??

    D3DXMatrixScaling(&matScale, 1.f, 1.f, 1.f);
    D3DXMatrixRotationZ(&matRotZ, D3DXToRadian(0.f));
    D3DXMatrixTranslation(&matTranse, -50.f, 0.f, 0.f);
    D3DXMatrixRotationZ(&matRevZ, D3DXToRadian(m_fAngle));


    if (m_fAngle > m_fMaxAngle)
    {
        m_fAngle -= m_fAngle;
        m_iRevCount++;
    }

    // ?熬곣뫖利??????ル봾諭??????
    if (m_bRev)
    {
        m_fAngle += m_fRevSpeed;
    }

    // ?熬곣뫖利????? ?????깅뉼????ル봾諭???嶺뚮??ｅ칰??잙갭큔????????
    if (!m_bRev)
    {
        D3DXMatrixTranslation(&matParrent, m_tInfo.vPos.x , m_tInfo.vPos.y, 0.f);
    }
    // ?熬곣뫖利??????????ル봾諭?????嚥싳쉶瑗??꾧틡?????Β??????댁벖??
    else if(m_bRev)
    {
        // ?????? 嚥싳쉶瑗??꾧틡?????Β??????댁벖?? 
        if (CPlayer_SSH* Temp = dynamic_cast<CPlayer_SSH*>(m_pTarget))
        {
            D3DXMatrixTranslation(&matParrent, Temp->Get_vPoint().x, Temp->Get_vPoint().y, 0.f);
            // ????댁벖????β뼯爰껓쭕????μ떜媛?슙???嚥싳쉶瑗??꾧틡?嶺뚮?爰????⑤슢?뽫춯???嚥싳쉶瑗??꾧틡?????Β???????멸땁嚥?
            m_tInfo.vPos = Temp->Get_vPoint();
        }
    }

    m_tInfo.matWorld = matScale * matRotZ * matTranse * matRevZ * matParrent;

    m_vPoint = m_vOriginPoint;
    D3DXVec3TransformCoord(&m_vPoint, &m_vPoint, &m_tInfo.matWorld);

    Key_Input();
    return OBJ_NOEVENT;
}

void CPlayer_SSH_Ice::Late_Update()
{
}

void CPlayer_SSH_Ice::Render(HDC hDC)
{
    if (m_bDead)
        return;

    int iScrollX = (int)CScrollMgr::Get_Instance()->Get_ScrollX();
    int iScrollY = (int)CScrollMgr::Get_Instance()->Get_ScrollY();

    Ellipse(hDC,
        int(m_vPoint.x - 20.f + iScrollX),
        int(m_vPoint.y - 20.f + iScrollY),
        int(m_vPoint.x + 20.f + iScrollX),
        int(m_vPoint.y + 20.f + iScrollY));

    TCHAR szStatus[100]{};

    swprintf_s(szStatus, L"Ice's Angle : %.2f", m_fAngle);
    TextOut(hDC, 500, 500, szStatus, lstrlen(szStatus));
    swprintf_s(szStatus, L"Ice's Location X : %.2f, Y : %.2f", m_vPoint.x, m_vPoint.y);
    TextOut(hDC, 500, 520, szStatus, lstrlen(szStatus));
    swprintf_s(szStatus, L"ICE");
    TextOut(hDC, (int)m_vPoint.x + iScrollX, (int)m_vPoint.y + iScrollY, szStatus, lstrlen(szStatus));
    swprintf_s(szStatus, L"Ice's RevCount : %d", m_iRevCount);
    TextOut(hDC, 500, 540, szStatus, lstrlen(szStatus));
}

void CPlayer_SSH_Ice::Release()
{
}

void CPlayer_SSH_Ice::Key_Input()
{
    if (m_bRev)
    {
        if (CKeyMgr::Get_Instance()->Key_Pressing('A'))
        {
            m_fAngle -= 5.f;
        }
        else if (CKeyMgr::Get_Instance()->Key_Pressing('D'))
        {
            m_fAngle += 5.f;
        }
    }
}
