#pragma once

#define WINCX		800
#define WINCY		600

#define VK_MAX				0xff
#define OBJ_NOEVENT			0
#define OBJ_DEAD			1	

#define	PURE		= 0
#define PI			3.141592f

#define sqrt_3    1.732f

#define OFFSET	500

#define SSH_FIRE dynamic_cast<CPlayer_SSH*>(CObjMgr::Get_Instance()->Get_LastPlayer())
#define SSH_ICE  dynamic_cast<CPlayer_SSH*>(CObjMgr::Get_Instance()->Get_Player())

#define REV_SPEED 7.f
#define REV_SLOW_SPEED 1.7f
#define SUCSSES_RANGE 30

#define IFD_BLOCK(x,y,z,fAngle) CObjMgr::Get_Instance()->Add_Object(OBJ_BLOCK, CAbstractFactory<CBlock_SSH>::Create({x,y,z},fAngle))
#define IFD_BLOCK_NORMAL(x,y,z) CObjMgr::Get_Instance()->Add_Object(OBJ_BLOCK, CAbstractFactory<CBlock_SSH>::Create({x,y,z}))
#define IFD_BLOCK_SLOW(x, y, z, bSlow) CObjMgr::Get_Instance()->Add_Object(OBJ_BLOCK, CAbstractFactory<CBlock_SSH>::CreateSlow({ x,y,z }, bSlow))

#define DEFINE_DRAWTOOL                                     \
HPEN NewPen;                                                \
HPEN OldPen;                                                \
HBRUSH NewBrush;								            \
HBRUSH OldBrush

#define NEW_DRAWTOOL(PenStyle,PenWidth,PenColor,BrushColor) \
NewPen = CreatePen( PenStyle , PenWidth , PenColor );       \
OldPen = (HPEN)SelectObject(hDC, NewPen);                   \
NewBrush = CreateSolidBrush( BrushColor );                  \
OldBrush = (HBRUSH)SelectObject(hDC, NewBrush) 

#define DELETE_DRAWTOOL                                     \
SelectObject(hDC, OldPen);                                  \
SelectObject(hDC, OldBrush);                                \
DeleteObject(NewPen);                                       \
DeleteObject(NewBrush)

extern HWND		g_hWnd;


enum SCENEID { SC_START, SC_MENU, SC_MOO, SC_KDH, SC_SSH,  SC_HERO, SC_END };
enum OBJID { OBJ_PLAYER, OBJ_BULLET, OBJ_MONSTER, OBJ_MOUSE, OBJ_SHIELD, OBJ_BUTTON, OBJ_BLOCK, OBJ_EFFECT, OBJ_END };
enum RENDERID { RENDER_BACKGROUND, RENDER_EFFECT, RENDER_GAMEOBJECT, RENDER_GAMEOBJECT_FRONT, RENDER_UI, RENDER_END };

enum CarmeraState { CS_ZoomAndFollow, CS_Shake1, CS_Shake2, CS_ZoomIN, CS_Slow_ZoomIN, CS_Force_ZoomIN, CS_ZoomOUT,CS_END };
enum Carmera {C_Move_LT, C_Move_size, C_Zoom_LT, C_Zoom_size, C_End };

template<typename T>
void Safe_Delete(T& Temp)
{
	if (Temp)
	{
		delete Temp;
		Temp = nullptr;
	}
}

static D3DXVECTOR3		Get_Mouse()
{
	POINT		pt{};

	GetCursorPos(&pt);
	ScreenToClient(g_hWnd, &pt);

	return D3DXVECTOR3((float)pt.x, (float)pt.y, 0.f );
}

typedef struct tagInfo
{
	D3DXVECTOR3		vDir;
	D3DXVECTOR3		vLook;
	D3DXVECTOR3		vNormal;	// ???モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊(???モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊)

	D3DXVECTOR3		vPos;

	D3DXMATRIX		matWorld;

}INFO;



// ???亦낃콛?????繹먮굝痢?
enum kSEQUENCE
{
	SEQUENCE_WAIT,
	SEQUENCE_PLAY,
	SEQUENCE_END,
};

enum kDIRECTION
{
	DIR_UP = 0,
	DIR_DOWN,
	DIR_LEFT,
	DIR_RIGHT
};


// ???モ닪??嶺뚮ㅎ?닸뤃????モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊???モ닪筌??域뱄퐣紐?????モ닪???????
// D3DXMatrixIdentity(???モ닪??嶺뚮ㅎ?닸뤃????モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊?????モ닪???????
// D3DXMatrixIdentity(&m_tInfo.matWorld);

// ????????렊 ???モ닪筌???源낃섬 ???モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊?????モ닪???????
// D3DXMatrixScaling(???モ닪筌????밸㎍?????렊???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊?????モ닪??????? X???モ닪筌????밸㎍?????렊, Y???モ닪筌????밸㎍?????렊, Z???モ닪筌????밸㎍?????렊)
// D3DXMATRIX		matScale;
// D3DXMatrixScaling(&matScale, 1.f, 2.f, 1.f);

// ?????????렊 ???モ닪筌???源낃섬 ???モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊?????モ닪???????
// D3DXMatrixRotationZ(???モ닪筌????밸㎍?????렊???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊?????モ닪??????? ?????????렊 ???モ닪筌????밸㎍?????렊(???モ닪筌????밸㎍?????렊))
// D3DXMATRIX		matRotZ, matRevZ;
// D3DXMatrixRotationZ(&matRotZ, D3DXToRadian(angle));

// ???モ닪筌????낅? ???モ닪筌???源낃섬 ???モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊?????モ닪???????
// D3DXMatrixTranslation(???モ닪筌????밸㎍?????렊???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊?????モ닪??????? x???モ닪筌????낅?, y???モ닪筌????낅?, z???モ닪筌????낅?)
// D3DXMATRIX		matTrans;
// D3DXMatrixTranslation(&matTrans, 400.f, 300.f, 0.f);

// dx???モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊???モ닪?????????モ닪筌????낅뻑???モ닪筌????밸㎍????モ닪?????????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊 癲ル슪?숁틦??????렊癲????モ닪????????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊?????モ닪??嶺뚮ㅎ?닸뤃????モ닪筌????낅샴?????モ닪筌????밸㎍?????렊??

// D3DXMATRIX		matScale, matRotZ, matTrans;
// 
// D3DXMatrixScaling(&matScale, 1.f, 2.f, 1.f);
// D3DXMatrixRotationZ(&matRotZ, D3DXToRadian(angle));
// D3DXMatrixTranslation(&matTrans, 400.f, 300.f, 0.f);
// 
// m_tInfo.matWorld = matScale * matRotZ * matTrans;

// ???モ닪筌????밸㎍???ル∥裕?????モ닪筌????밸㎍?????렊?????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊???モ닪筌????밸㎍?????렊???類ㅻ㎍????モ닪???????
// D3DXVec3TransformCoord(???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪??????????モ닪筌????낅?), ???モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????낅? ???モ닪筌????밸㎍?????렊, ???モ닪筌????밸㎍?;
// D3DXVec3TransformNormal(???モ닪筌????밸㎍????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪??????????モ닪筌????밸㎍?????렊), ???モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊???モ닪筌?????モ닪筌????밸㎍?????렊 ???モ닪筌????밸㎍?????렊, ???モ닪筌????밸㎍?;
